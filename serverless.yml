service: tea-api

custom:
  app-name: the-evolved-alligator
  app-short-name: tea
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  cors:
    origin: '*'
    headers:
      - Accept
      - Content-Type
      - Authorization
      - Referer
      - X-Amz-Date
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - X-B3-SpanId
      - X-B3-TraceId
  authorizer:
    name: cognito-authorizer
    type: COGNITO_USER_POOLS
    arn: !GetAtt CognitoUserPool.Arn
    claims:
      - email

plugins:
  - serverless-webpack
  - serverless-offline

package:
  individually: true
  exclude:
    - buildspec.yml
    - .idea
    - README.md

provider:
  name: aws
  runtime: nodejs12.x
  deploymentBucket:
    name: tea-backend-build
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource:
            - !GetAtt TeaDynamoDbTable.Arn
            - !Join
              - ''
              - - !GetAtt TeaDynamoDbTable.Arn
                - "/index/*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:ListUsers
            - cognito-idp:ChangePassword
          Resource:
            - !GetAtt CognitoUserPool.Arn
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - !GetAtt PostsS3Bucket.Arn
            - !Join
              - '/'
              - - !GetAtt PostsS3Bucket.Arn
                - "*"

layers:
  dependencies:
    name: tea-dependencies
    description: Dependencies
    compatibleRuntimes:
      - nodejs12.x
    retain: false
    package:
      artifact: layers/dependencies/nodejs.zip

functions:

  CreatePost:
    package:
      include:
        - src/posts/create/create.ts
    layers:
      - { Ref: DependenciesLambdaLayer }
    handler: src/posts/create/create.handler
    events:
      - http:
          path: posts
          method: post
          cors: ${self:custom.cors}
          authorizer: ${self:custom.authorizer}

  ListPosts:
    package:
      include:
        - src/posts/list/list.ts
    layers:
      - { Ref: DependenciesLambdaLayer }
    handler: src/posts/list/list.handler
    events:
      - http:
          path: posts
          method: get
          cors: ${self:custom.cors}

  GetS3SignedUrl:
    package:
      include:
        - src/files/get-signed-url/get-signed-url.ts
    layers:
      - { Ref: DependenciesLambdaLayer }
    handler: src/files/get-signed-url/get-signed-url.handler
    events:
      - http:
          path: files/signed-url
          method: get
          cors: ${self:custom.cors}
          authorizer: ${self:custom.authorizer}

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName:
          Fn::Join:
            - '-'
            - - ${self:custom.app-short-name}
              - user-pool
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            StringAttributeConstraints:
              MinLength: 0
              MaxLength: 2048
            DeveloperOnlyAttribute: false
            Required: false
            AttributeDataType: String
            Mutable: true
          - Name: fullName
            StringAttributeConstraints:
              MinLength: 0
              MaxLength: 2048
            DeveloperOnlyAttribute: false
            Required: false
            AttributeDataType: String
            Mutable: true
        UsernameAttributes:
          - email
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: false
            TemporaryPasswordValidityDays: 7
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: True
          InviteMessageTemplate:
            EmailSubject: "TEA Invite"
            EmailMessage: "<p>Welcome to TEA</p> <p>Your email {username} has been registered to TEA.</p> <p>To enter to the platform go to <a href=\"https://development.d1kq5fao1tbrzi.amplifyapp.com/auth/token/{####}\">TEA Login</a> and follow the instructions.</p>"
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId:
          Ref: CognitoUserPool
        ClientName:
          Fn::Join:
            - '-'
            - - ${self:custom.app-short-name}
              - cognito
        GenerateSecret: false
    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:custom.app-short-name}
        UserPoolId:
          Ref: CognitoUserPool
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName:
          Fn::Join:
            - '-'
            - - ${self:custom.app-short-name}
              - 'cognito-identity-pool'
        AllowUnauthenticatedIdentities: true
        CognitoIdentityProviders:
          - ClientId: !Ref CognitoUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName
    TeaDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: lsi1
            AttributeType: S
          - AttributeName: lsi2
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: lsi1-index
            KeySchema:
              - AttributeName: pk
                KeyType: HASH
              - AttributeName: lsi1
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: lsi2-index
            KeySchema:
              - AttributeName: pk
                KeyType: HASH
              - AttributeName: lsi2
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName:
          Fn::Join:
            - '-'
            - - ${self:custom.app-short-name}
              - 'table'
    PostsS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName:
          Fn::Join:
            - '-'
            - - ${self:custom.app-short-name}
              - posts
        AccessControl: PublicRead
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
          Status: Suspended
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: [ '*' ]
              AllowedMethods: [ GET, PUT ]
              AllowedOrigins: [ '*' ]
              Id: CORSRuleId1
              MaxAge: '3600'
    PostS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PostsS3Bucket
        PolicyDocument:
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref PostsS3Bucket
                  - /*
              Principal: '*'
